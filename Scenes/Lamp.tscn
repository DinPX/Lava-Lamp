[gd_scene load_steps=17 format=2]

[ext_resource path="res://Assets/Textures/cover.png" type="Texture" id=1]
[ext_resource path="res://Assets/Textures/contents.png" type="Texture" id=2]
[ext_resource path="res://Scripts/Main.gd" type="Script" id=3]
[ext_resource path="res://Scripts/Lamp.gd" type="Script" id=4]
[ext_resource path="res://Assets/Textures/quit_button.png" type="Texture" id=5]
[ext_resource path="res://Assets/Textures/minimize_button.png" type="Texture" id=6]
[ext_resource path="res://Assets/Textures/scale_button.png" type="Texture" id=7]
[ext_resource path="res://Scripts/TitleBar.gd" type="Script" id=8]
[ext_resource path="res://Assets/Textures/minimize_button_hovered.png" type="Texture" id=9]
[ext_resource path="res://Assets/Textures/scale_button_hovered.png" type="Texture" id=10]
[ext_resource path="res://Assets/Textures/quit_button_hovered.png" type="Texture" id=11]

[sub_resource type="Shader" id=1]
code = "// This is a 2D CanvasItem shader
shader_type canvas_item;

// Uniforms for configuration
uniform float top = 1.0;                      // Top of the blob area
uniform float bottom = 0.0;                   // Bottom of the blob area
uniform float blob_threshold = 1.25;           // Threshold for blob visibility
uniform float random_seed = 0.0;              // Unique random seed per object
uniform float blob_scale_x = 1.0;             // Scale factor for blob size (X axis)
uniform float blob_scale_y = 1.0;             // Scale factor for blob size (Y axis)
uniform bool blobs_enabled = true;            // Enable or disable blobs
uniform float blob_speed = 1.0;               // Speed of the blob movement

// Background gradient colors with adjustable alpha
uniform vec4 background_edge : hint_color = vec4(0.1, 0.0, 0.2, 1.0);
uniform vec4 background_center : hint_color = vec4(0.5, 0.0, 0.8, 1.0);
uniform float background_alpha = 0.5;         // Background transparency (0.0 to 1.0)

// Blob gradient colors with adjustable alpha
uniform vec4 blob_top : hint_color = vec4(1.0, 0.4, 0.4, 1.0);
uniform vec4 blob_bottom : hint_color = vec4(1.0, 1.0, 0.3, 1.0);
uniform float blob_alpha = 1.0;               // Blob transparency (0.0 to 1.0)

// Function to generate a pseudo-random value based on seed
float random(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898, 78.233)) + random_seed) * 43758.5453123);
}

// Function to calculate oscillation for blob movement
float oscillate(float time, float offset, float speed) {
	return 0.5 + 0.5 * sin(time * speed + offset);
}

void fragment() {
    // Sample the base texture and respect its transparency
    vec4 base_color = texture(TEXTURE, UV);
    float base_alpha = base_color.a; // Use the alpha of the base texture

    // Background gradient based on UV.x
    vec4 background_color = mix(background_edge, background_center, abs(0.5 - UV.x) * 2.0);
    background_color.a *= background_alpha; // Apply adjustable background transparency

    // If blobs are disabled, show only the background
    if (!blobs_enabled) {
        COLOR = background_color * base_alpha; // Combine with base texture transparency
    } else {
        // Blob centers and radii (fixed size array)
		const int blob_count = 6;
		vec3 blob_centers[6];
		for (int i = 0; i < blob_count; i++) {
			float random_offset = random(vec2(float(i), 0.0)); // Random per blob
			blob_centers[i] = vec3(
				0.4 + 0.2 * random(vec2(float(i), 1.0)), // X position with some randomization
				bottom + oscillate(TIME, random_offset, blob_speed * (0.1 + 0.3 * random(vec2(float(i), 2.0)))) * (top - bottom), // Ensure blobs start at bottom and move up
				0.03 + 0.05 * random(vec2(float(i), 3.0)) // Base radius (without scaling)
			);
		}

        // Calculate blob influence with independent X and Y scaling
        float influence = 0.0;
        for (int i = 0; i < blob_count; i++) {
            vec2 scaled_uv = vec2(UV.x / blob_scale_x, UV.y / blob_scale_y);
            vec2 scaled_center = vec2(blob_centers[i].x / blob_scale_x, blob_centers[i].y / blob_scale_y);
            float distance_to_blob = distance(scaled_uv, scaled_center);
            influence += blob_centers[i].z / (distance_to_blob + 0.01); // Avoid division by zero
        }

        // Adjusted blob color blending to apply gradient from bottom to top
        float gradient_position = clamp((UV.y - bottom) / (top - bottom), 0.0, 1.0);
        vec4 blob_color = mix(blob_bottom, blob_top, gradient_position);
        blob_color.a *= blob_alpha; // Apply adjustable blob transparency

        // Determine the final color based on influence
        vec4 final_color = background_color;
        if (influence > blob_threshold) {
            final_color = blob_color;
        } else {
            final_color = mix(background_color, blob_color, pow(influence / blob_threshold, 2.0));
        }

        // Combine with the base texture transparency
        final_color.a *= base_alpha;

        // Output the final color
        COLOR = final_color;
    }
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 1 )
shader_param/top = 1.0
shader_param/bottom = 0.0
shader_param/blob_threshold = 1.25
shader_param/random_seed = 0.0
shader_param/blob_scale_x = 1.0
shader_param/blob_scale_y = 1.0
shader_param/blobs_enabled = true
shader_param/blob_speed = 1.0
shader_param/background_edge = Color( 0.1, 0, 0.2, 1 )
shader_param/background_center = Color( 0.5, 0, 0.8, 1 )
shader_param/background_alpha = 1.0
shader_param/blob_top = Color( 1, 0.4, 0.4, 1 )
shader_param/blob_bottom = Color( 1, 1, 0.3, 1 )
shader_param/blob_alpha = 1.0

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform vec4 line_color : hint_color = vec4(1);
uniform float line_thickness : hint_range(0, 10) = 1.0;

void fragment() {
	vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
	
	float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
	outline += texture(TEXTURE, UV + vec2(0, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;
	outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;
	outline += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
	outline = min(outline, 1.0);
	
	vec4 color = texture(TEXTURE, UV);
	COLOR = mix(color, line_color, outline - color.a);
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/line_color = Color( 1, 1, 1, 1 )
shader_param/line_thickness = 0.0

[sub_resource type="ViewportTexture" id=7]
viewport_path = NodePath("Viewport")

[node name="Main" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_default_cursor_shape = 7
input_pass_on_modal_close_click = false
script = ExtResource( 3 )

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 120, 318 )
own_world = true
transparent_bg = true
handle_input_locally = false
hdr = false
render_target_v_flip = true

[node name="Parts" type="Control" parent="Viewport"]
light_mask = 0
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
input_pass_on_modal_close_click = false

[node name="Contents" type="TextureRect" parent="Viewport/Parts"]
light_mask = 0
material = SubResource( 4 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_bottom = -80.0
mouse_filter = 2
texture = ExtResource( 2 )
expand = true
stretch_mode = 4

[node name="Cover" type="TextureRect" parent="Viewport/Parts"]
light_mask = 0
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = 18.0
margin_bottom = 18.0
mouse_filter = 2
input_pass_on_modal_close_click = false
texture = ExtResource( 1 )

[node name="Lamp" type="TextureRect" parent="."]
light_mask = 0
material = SubResource( 6 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
input_pass_on_modal_close_click = false
texture = SubResource( 7 )
script = ExtResource( 4 )

[node name="TitleBar" type="HBoxContainer" parent="."]
light_mask = 0
anchor_right = 1.0
anchor_bottom = 0.057
margin_bottom = -0.1
rect_min_size = Vector2( 0, 18 )
input_pass_on_modal_close_click = false
alignment = 2
script = ExtResource( 8 )

[node name="Minimize" type="TextureButton" parent="TitleBar"]
light_mask = 0
margin_left = 58.0
margin_right = 76.0
margin_bottom = 18.0
mouse_filter = 1
mouse_default_cursor_shape = 2
input_pass_on_modal_close_click = false
texture_normal = ExtResource( 6 )
texture_hover = ExtResource( 9 )

[node name="Scale" type="TextureButton" parent="TitleBar"]
light_mask = 0
margin_left = 80.0
margin_right = 98.0
margin_bottom = 18.0
mouse_filter = 1
mouse_default_cursor_shape = 2
input_pass_on_modal_close_click = false
texture_normal = ExtResource( 7 )
texture_hover = ExtResource( 10 )
stretch_mode = 4

[node name="Quit" type="TextureButton" parent="TitleBar"]
light_mask = 0
margin_left = 102.0
margin_right = 120.0
margin_bottom = 18.0
mouse_filter = 1
mouse_default_cursor_shape = 2
input_pass_on_modal_close_click = false
texture_normal = ExtResource( 5 )
texture_hover = ExtResource( 11 )
stretch_mode = 4

[node name="Tween" type="Tween" parent="."]
unique_name_in_owner = true

[connection signal="mouse_entered" from="." to="Lamp" method="_on_Main_mouse_entered"]
[connection signal="mouse_entered" from="." to="TitleBar" method="_on_Main_mouse_entered"]
[connection signal="mouse_exited" from="." to="Lamp" method="_on_Main_mouse_exited"]
[connection signal="mouse_exited" from="." to="TitleBar" method="_on_Main_mouse_exited"]
[connection signal="pressed" from="TitleBar/Minimize" to="." method="_on_Minimize_pressed"]
[connection signal="pressed" from="TitleBar/Scale" to="." method="_on_Scale_pressed"]
[connection signal="pressed" from="TitleBar/Quit" to="." method="_on_Quit_pressed"]
